\documentclass[11pt]{article}
\usepackage[a4paper, left=0.5in, right=0.5in, top=1in, bottom=1in]{geometry}
\usepackage{times}
\usepackage{graphicx}

\begin{document}

\title{CS 296 Course Project - Escalator Simulation}

\author{
	Group 22\\
	Arpit Singh\\ 
	\texttt{120050037} , \texttt{arptisingh26@cse.iitb.ac.in} \\
	Harish Koilada\\ 
	\texttt{120050038} , \texttt{rimcoharish@cse.iitb.ac.in} \\
	Nishanth Koushik\\ 
	\texttt{120050041} , \texttt{nnk@cse.iitb.ac.in}
}

\date{\today}

\maketitle

\section{Introduction}

	In this report, we analyse our simulation of an escalator, created in Box2D. We first present a comparison of our original design and the end result, and talk about and try to explain some of the differences between the two. We then talk about our end result in some detail, and examine its performance by studying the data obtained during the timing and profiling of the source code.

\section{Original conception vs end result}

	Our original design is a more or less faithful reproduction of the actual design of an escalator, with the exception of the steps. An actual escalator uses a rather sophisticated mechanism to maintain its structure, which had to be simplified for the purposes of our implementation.
	
	In our final simulation, we have tried to stick to out original conception as far as possible. The handrail gear is motorised and self-driven, as opposed to being driven by the step chain gear, as is actually the case. This was done to avoid interaction between the belt connecting the two and the belt connecting the main motor to the step chain gear, which would otherwise have been difficult to resolve.
	
	We have also left out the horizontal sections on both ends of the escalator, as we were unable to successfully wrap a belt around the compound structure without it disintegrating under even slight stress in the course of its motion.

\section{Design Analysis}

	Our escalator is driven by a motor which is connected to the top step chain gear. The bottom step chain gear is is driven by the top one. The top handrail gear is self-driven, and also drives the bottom one.
	
	Both the handrail and the step chain are built up using many small rectangular segments, attached to each other using revolute joints. They were both built in four segments, two going over the top and bottom, and two going over either side, which were then affixed to each other as appropriate.
	
	The steps themselves are implemented as rectangular blocks affixed to their respective step chain segments.
	
	The belts are somewhat slack at the start of the simulation, but stabilise with time. The simulation is occasionally jittery as well, but we have done our best to make the overall simulation as smooth as possible, by optimising various parameters associated with the design, such as the size and number of the steps and chain segments.

\section{Timing}

\subsection{Plot 1}

	%\includegraphics[width=300pt, height=200pt]{plots/plot1.png}\\\\
	
	This plot is a graph of average step time and average loop time versus the number of iterations (n).\\

	The loop time is equal to the step time (which is independent of n), times n. It is thus expected to grow linearly with n. The graph shows that this is indeed more or less the case.\\

	We further expect the slope of this line to be equal to the step time. The slope is approximately equal to (100 ms) / 100, which is 1 ms.\\

	The step time is expected to be independent of n. The graph, however, seems to indicate a downward trend. We think that this is because the values of n for which data was obtained are too small. We further think that as the value of n is increased, the step time value will stabilise, presumably at a value close to 1 ms. We can see from our graph that this does indeed seem to be the case.\\

	Note that when n = 1, we should obtain roughly equal values for step and loop times, as we do.

\subsection{Plot 2}

	%\includegraphics[width=300pt, height=200pt]{plots/plot2.png}\\\\

	This plot graphs the averages of step time, collision resolution time, velocity update time, position update time, and the sum of the last three quantities.\\

	We observe, as expected, that the averages remain more or less constant as n increases (barring anomalies at small values of n), and that the sum of the final three quantities is still somewhat less than the step time, which would include some additional overheads as well.\\

	It is also understandable that the velocity and position update times are nearly the same, and that they are both somewhat less than the collision resolution time. This is because the computation of the updated simulation parameters is part of collision resolution, and the update times count only the assignment of new values to these parameters.

\subsection{Plot 3}

	%\includegraphics[width=300pt, height=200pt]{plots/plot3.png}\\\\

	This is a graph of step time average (in ms), against the number of iterations, plotted with error bars. It is interesting to see that the size of the error decreases as the number of iterations is increased.

\subsection{Plot 4}

	%\includegraphics[width=300pt, height=200pt]{plots/plot4.png}\\\\

	This plot, graphing frequency and cumulative frequency of step times, peaks at a step time of about 0.983 ms. Our step time data, for these small values of n, does seem to be accumulated around a value close to 1 ms.

\subsection{Plot 5}

	%\includegraphics[width=300pt, height=200pt]{plots/plot5.png}\\\\

	This plot constructs linefits for the average step time, plotted using both the entire data set, and a random subset.
	
	The linefit confirms the seeming downward trend that was observed for the step time. It is interesting to note that as the number of repetitions for a particular value of n is fairly large (150), the linefit for the random sample and the total set are very close to each other.

\subsection{Comparing \texttt{time} and \texttt{gettimeofday()}}
	
	\vspace{0.5cm}

	\begin{center}
		\begin{tabular}{ | l | l | p{3cm} |}
			\hline
				Iterations & \texttt{time} & \texttt{gettimeofday()} \\ \hline
				500 & 492 ms & 527 ms \\ \hline
				5000 & 4589 ms & 4786 ms \\ \hline
				50000 & 45583 ms & 47785 ms \\ \hline
		\end{tabular}
	\end{center}

	Note that \texttt{gettimeofday()} measures only the total loop time whereas \texttt{time} measures the total program execution time, which includes the sections of the program before and after the loop.

\section{Profiling}

	The profiler used for profiling is \texttt{gprof}

\subsection{Comparing execution time with and without optimisation}

	\vspace{0.5cm}

	\begin{center}
		\begin{tabular}{ | l | l | l | l |}
			\hline
				Iterations & Optimised with -O3 & Optimised with -O2 & Without Optimisation \\ \hline
				50 & 50 ms & 52 ms & 85 ms \\ \hline
				500 & 527 ms & 509 ms & 787 ms\\ \hline
				50000 & 4786 ms & 4758 ms & 7305 ms\\ \hline
		\end{tabular}
	\end{center}

	The -On flag is used to specify the level of optimisation used in compiling the code. The default is -O0. We can clearly see the improvement made by using -O2 optimisation. However, we observe very negligible improvement when we move from -O2 to -O3. The additional optimisation flags added by -O3 probably do not make a difference for our program.

\subsection{Call Graph}

	\vspace{0.5cm}

	%\includegraphics[width=525pt, height=525pt]{plots/graph.png}\\\\

\section{Performance Analysis}

	\subsection{With optimisation flags}
	With optimisation flags, the call graph obtained is not accurate and hence we cannot make reasonable conclusions about the execution of the program. This is because the compiler compiles the program differently, meaning that the profiler is unable to obtain all the data it wants. Also, the connections between the various functions is not shown in the callgraph as the profiler is not able to keep track of all the function calls. But the trend of the time taken by the functions will be more or less the same as in the debug mode.

	\subsection{Without optimisation flags}
	The call graph included above is of the \texttt{debug-prof} target for 5000 iterations. This makes the execution time fairly longer than that when run with optimisation flags. We observe from the above call graph that the function which takes up the most time is \texttt{SolveVelocityConstraints()} followed by the arithmetic operators, - and *.

\section{Conclusion}

	This completes our analysis of our simulation of an escalator in Box2D. The timing and profiling data reveal a lot of interesting details about the execution of the code, and we have attempted to understand some of them in the above sections.

\end{document}

\documentclass[11pt]{article}
\usepackage[a4paper, left=0.5in, right=0.5in, top=1in, bottom=1in]{geometry}
\usepackage{graphicx}
\usepackage{float}
\usepackage{url}

\begin{document}
\title{CS296 Project : Crane Arm Simulation}
\author{Venkatesh Dupadda\\
		120050039\\
		120050039@iitb.ac.in \and
        Siddhant Rajagopalan\\
		120100006\\
		rajgo94@gmail.com \and
		B.N.S Akshay Veer\\
		120050062\\
		akshayveer@iitb.ac.in
		\\}
\date{\today} 
\maketitle

\section{Introduction}
Box2D
\cite{bman} 
is a 2D rigid body simulation library for games.It is a physics engine written in C++ for animation.As our course project we have designed a crane arm for lifing weights using Box2D.In this report we first discuss our original design and later we discuss our accomplished design and analysis of various parts of its code.
\section{Original Design}

\begin{figure}[ht!]
\centering
\includegraphics[height=11cm]{design.jpg}
\end{figure}

\subsection{Brief Description}
Hydraulic arm is used to lift and lower heavy objects.When we apply force on the hydraulic piston this moves the arms of the crane, which rotate on pivot joints and this causes force on the other piston which finally causes tension in rope.This tension in rope is used to move the arms required to hold or lower the objects.
\section{Final Design}

\begin{figure}[ht!]
\centering
\includegraphics[height=9cm]{final.jpg}
\end{figure}

\subsection{Overall Description}
In this simulation we wanted to transfer the weights to container far away.This crane arm is controlled by the user.So we can lift the weights and place them on the conveyor belt.This converyor belt carries these weights to container.This is the overall idea of simulation.
\subsection{Description of Parts of Crane}
The crane is made up of both static and dynamic parts.The first arm is static and is attached to ground.Except the first arm all the remaining arms are dynamic.The second arm is connected to first arm and third arm by revoluting joints.Each revoluting joint has motor to control torque on that revoluting joint.The third arm is connected to second arm and to arms which are used to widen holder arms.Both the connecting joints are revolute joints.Finally both the holder arms are connected to arm which is used to widen these.Learn more about Box2D here 
\cite{iforce}.

\subsection{Timing Analysis of Simulation}
\subsubsection{Average Step Time, Average Loop Time VS number of Iterations}
This is graph between Average Step Time, Average Loop Time versus number of iterations.
\\ \\ Average step time is independent of number of iterations because whatever may be number of iterations it takes same time for a step.So the Average step time versus number of iteration should be constant, since we have drawn histograms all of them should be of same height.The graph obtained also satisfies what we have observed.
\\ \\ Coming to the Average loop time versus this is nothing but (number of iterations * step time), since step time is independent of number of iterations we expect the graph to be linear, Indeed the graph is linear.Therefore our observations are correct.
\begin{figure}[ht!]
\centering
\includegraphics[height=8cm]{g23_plot01.png}
\end{figure}

\subsubsection{Average Step Time, Collision Resolution Time, Velocity Update Time, Position Update Time, and their sums VS Number of Iterations}
This is graph between the average of step time, average collision resolution time, average velocity update time, position update time, and their sum versus number of iterations.\\ \\
From the graph we can see that the averages of step time,collision resolution time, velocity update time, position update time are independent of n (with some disturbances when n is small). We can see that position update time and collision resolution time are nearly same.These time spent in updating positions and resolving collisons is less than velocity update time.So the simulation take more time in calculating velocities of bodies. We can observe that step size is more than sum of above times, from this we can infer that some time is spent on other parts.
\begin{figure}[H]
\centering
\includegraphics[height=8cm]{g23_plot02.png}
\end{figure}

\subsection{Errors in Reruns VS Number of Iterations}
This is graph between step time versus number of iterations along with error bars indicating variations in step time over all reruns.
From the graph we can observe that variation in step size over all reruns decreases, therefore all the error bars size decreases.
\begin{figure}[H]
\centering
\includegraphics[height=8cm]{g23_plot03.png}
\end{figure}

\subsection{Best Fit Line for Average Step Time,15 Random ReRuns of Iterations VS Iterations}
This is graph of Best Fit Lines of Average Step Time, 15 ReRuns of a each iteration versus number of iterations.As we have observed in graph1 average step time is independent of number of iterations.So the expected best fit line should be nearly horizontal if n (number of iterations) is very large.From the obtained graph we can see that this is the case.
\begin{figure}[H]
\centering
\includegraphics[height=8cm]{g23_plot04.png}
\end{figure}
We have generated all these plots using GNU plot 
\cite{gnu}.
\subsection{Profiling of Code}
\subsubsection{Brief information on code profiling}
1. There are two modes in which we can compile base code for profiling.\\
2. Generally profiling in done inorder to find which parts of code are using more resources, to find bugs in code and to 		   optimise overall running time and resources used by program.\\	
3. They are namely Debug profiling mode and Release profiling mode.\\
4. In release profiling mode we use compiler options like -O3, -O2 and in debug profiling mode we omit these. \\
5. -O3 and -O2 are compiler option used to optimize the runtime by supressing many function calls and runs the code in elegant 		manner, therefore we find less function calls in release profiling mode.\\
6. In Debug profiling mode we don't use these above mentioned optimizing compiler options, so we find much more branches and 	   more time for running the program.\\
7. See the graphs obtained release.png and debug.png in images folder for distinction between these profiling modes.\\
\subsubsection{Problems faced during profiling}
1.  Since our program is controlled by user by clicking keys from keyboard we cannot directly use the main.cpp to profile the code by directly calling step function.So here we called some of the functions which are triggered movements in objects of simulation.
\subsubsection{Inferences from Release profiling mode Graph}
1. For very smaller number of iterations we are getting erroneous data. This is happening because some funcitons are taking very less time and are being ignored, and for moderate number of iterations some function are taking less time and are not 		being considered. So we are taking 10,000 iteration to get clear picture of function which are being called in program. \\
2. In this mode for 10,000 iterations SolveVelocityConstraints function in b2RevoluteJoint class is taking maximum time in every iteration. \\
3. SolveVelocityConstraints is taking maximum time because at every step it has to calculate the angular velocities of each and every revolute joint connecting bodies involved in the simulation by applying laws and solving the angular velocties according to them. \\
4. The remaining funcitons like SolvePositionConstraits, TimeOfImpact and some maths functions to solve vector constraints take nearly same time in every iteration. \\
\begin{figure}[H]
\centering
\includegraphics[height=15cm]{release.png}
\caption{Graph of Release profile mode}
\end{figure}

\subsubsection{Inferences from Debug profiling mode Graph}
1. For very smaller number of iterations we are getting erroneous data. This is happening because some funcitons are taking very less time and are being ignored, and from moderate number of iteration we are getting valid data because this is Debug 	profiling mode and we are not using any optimizing compiler option so we are able to see all function calls which were made 
	in the program and were are getting significant noticable amount of time for each function. Hence only moderate number of iteration are required for this.
2. In this mode SolveVelocityConstraints in b2RevoluteJoint class and operator functions for solving vector constraints are taking maximum time in every iteration. \\
3. SolveVelocityConstraints is taking maximum time because at every step it has to calculate the angular velocities of each and and every revolute joint connecting bodies involved in the simulation by applying laws and solving the angular velocties according to them. \\
4. The remaining funcitons like Step, SolvePositionConstraits, TimeOfImpact, and some maths function to solve vector constraints take nearly same time in every iteration. \\
5. In this we can see the relationship between callee-caller ie. the functions which are invoked by calling a parent function.
   From this we can also identify the amount of time and resources used by child functions. This helps in identifying which subfunction calls taking more time and we can reduce them.\\
6. Note that coloring of blocks are assigned according to usage of time and arrows point to all function calls inside a parent
   function.

\begin{figure}[H]
\centering
\includegraphics[height=19cm,width=19cm]{debug.png}
\caption{Graph of Debug profile mode}
\end{figure}

\subsection{Timing Differences in Release and Debug profiling modes}
\subsubsection{Release Profiling Mode}
Number of Iterations: 10000 \\
Average time per step is 0.103124 ms \\
Average time for collisions is 0.003853 ms \\
Average time for velocity updates is 0.023186 ms \\
Average time for position updates is 0.033141 ms \\
Total loop time is 1075.557129 \\
\subsubsection{Debug Profiling Mode}
Number of Iterations: 10000 \\
Average time per step is 0.771601 ms \\
Average time for collisions is 0.037923 ms \\
Average time for velocity updates is 0.229691 ms \\
Average time for position updates is 0.158478 ms \\
Total loop time is 7800.75097 \\
From the above data we can see that time when compiled with Release profiling mode takes less time than Debug profiling mode as expected.Read more about profiling here
\cite{prof}\
\section{What Makes Our Design Interesting}
Our design shows process in which cranes work.These type of arms are very crucial in many industries and many machines for example in assembly lines and cranes.In this simple and funny design user can control the machine using keys.This makes our desing interesting.
\section{Conclusion}
We have discussed the various components of our simulation model, covering design, special features and timing analysis.We hope the reader found this report interesting and informative.
%biblography
\bibliography{ref}
\bibliographystyle{plain}
\end{document}